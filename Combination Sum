class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        helper(res, new ArrayList<>(), candidates, target, 0, 0);
        return res;
    }
    public void helper(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int sum, int index) {
       if(sum >= target) {
            if(sum == target && !res.contains(list)) {
                res.add(new ArrayList<>(list));
            }
            return;
        }
        for(int i = index; i < candidates.length; i++) {
            list.add(candidates[i]);
            helper(res, list, candidates, target, sum + candidates[i], i);
            list.remove(list.size() - 1);
        }
    }
}
