class Solution {
    public List<String> letterCombinations(String digits) {   Time Complexity:O(4 ^ n)
        if(digits == null || digits.length() == 0) return new ArrayList<>();
        Map<Character, String> map = new HashMap<>();     //build a map
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        
        List<String> res = new ArrayList<>();
        helper(res, map, digits, "", 0);
        return res;
    }
    public void helper(List<String> res, Map<Character, String> map, String digits, String comb, int index) {
        if(index == digits.length()) {    // a complete string, then add to the result
            res.add(comb);
            return;
        }
        String temp = map.get(digits.charAt(index));    // get current digit
        for(int i = 0; i < temp.length(); i++) {
            helper(res, map, digits, comb + temp.charAt(i), index + 1);
        }
    }
}
