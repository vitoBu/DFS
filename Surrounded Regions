class Solution {
    public void solve(char[][] board) {
        //not on the boarder
        if(board == null || board.length == 0 || board[0].length == 0) return;
        int m = board.length - 1;
        int n = board[0].length - 1;
        for(int i = 0; i <= m; i++) {
            if(board[i][0] == 'O') {
                dfs(board, i, 0);
            }
            if(board[i][n] == 'O') {
                dfs(board, i, n);
            }
        }
        for(int i = 0; i <= n; i++) {
            if(board[0][i] == 'O') {
                dfs(board, 0, i);
            }
            if(board[m][i] == 'O') {
                dfs(board, m, i);
            }
        }
        
        for(int i = 0; i <= m; i++) {
            for(int j = 0; j <= n; j++) {
                if(board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                if(board[i][j] == 'A') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    public void dfs(char[][] board, int i, int j) {
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length) return;
        if(board[i][j] == 'O') {      //on the board or connected with points on the board stay unchanged
            board[i][j] = 'A';
        }
        if(i > 1 && board[i - 1][j] == 'O') {
            dfs(board, i - 1, j);
        }
        if(j > 1 && board[i][j - 1] == 'O') {
            dfs(board, i, j - 1);
        }
        if(i < board.length - 2 && board[i + 1][j] == 'O') {
            dfs(board, i + 1, j);
        }
        if(j < board[0].length - 2 && board[i][j + 1] == 'O') {
            dfs(board, i, j + 1);
        }
    }
}
